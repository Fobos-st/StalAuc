from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types

main_button = [
    [types.KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã"),
     types.KeyboardButton(text="–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")],
    [types.KeyboardButton(text="–¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å"),
     types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å")]

]
main_kb = types.ReplyKeyboardMarkup(keyboard=main_button, resize_keyboard=True, one_time_keyboard=False)


quality_inline_button = [
    [types.InlineKeyboardButton(text='–û–±—ã—á–Ω—ã–π', callback_data='0')],
    [types.InlineKeyboardButton(text='–ù–µ–æ–±—ã—á–Ω—ã–π', callback_data='1')],
    [types.InlineKeyboardButton(text='–û—Å–æ–±—ã–π', callback_data='2')],
    [types.InlineKeyboardButton(text='–†–µ–¥–∫–∏–π', callback_data='3')],
    [types.InlineKeyboardButton(text='–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π', callback_data='4')],
    [types.InlineKeyboardButton(text='–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', callback_data='5')],
]

quality_inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=quality_inline_button)

additional_inline_keyboard = types.InlineKeyboardMarkup()
for i in range(1, 16):
    additional_inline_keyboard.add(types.InlineKeyboardButton(text=f'{i}', callback_data=f'{i}'))
additional_inline_keyboard.add(types.InlineKeyboardButton(text='–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã', callback_data='All'))


cancel_button = [
    [types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚ùå', callback_data='–û—Ç–º–µ–Ω–∞')]
]

cancel_inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=cancel_button)


async def get_keyboard_item(choices):
    kb = InlineKeyboardMarkup(resize_keyboard=True)
    for choice in choices.keys():
        kb.add(
            InlineKeyboardButton(choice, callback_data=f'{choices.get(choice)}'),
        )
    kb.add(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞‚ùå', callback_data='–û—Ç–º–µ–Ω–∞'))
    return kb


async def get_control_menu(callback: str) -> types.inline_keyboard.InlineKeyboardMarkup:
    """
    –í –∑–∞–≤–∏—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ç callback.data –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :param callback: callback_data
    :return: InlineKeyboard
    """
    callback = callback.split()
    page = int(callback[1])
    id_item = callback[2]
    if callback[0] == "add_page":
        page += 1
        if callback[3] == 'asc':
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"remove_page {page} {id_item} asc"),
                 types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} asc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîº", callback_data=f"none {page} {id_item} desc")]
            ]
        else:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"remove_page {page} {id_item} desc"),
                 types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîΩ", callback_data=f"none {page} {id_item} asc")]
            ]
        ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
        return ikb
    elif callback[0] == "remove_page":
        page -= 1
        if page == 1:
            if callback[3] == 'asc':
                auc_table_inline_button = [
                    [types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                     types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                    [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîº", callback_data=f"none {page} {id_item} desc")]
                ]
            else:
                auc_table_inline_button = [
                    [types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                     types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                    [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîΩ", callback_data=f"none {page} {id_item} asc")]
                ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
        else:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"remove_page {page} {id_item} desc"),
                 types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîΩ", callback_data=f"none {page} {id_item} asc")]
            ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
    elif callback[3] == 'asc':
        if page == 1:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} asc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîº", callback_data=f"none {page} {id_item} desc")]
            ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
        else:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"remove_page {page} {id_item} asc"),
                 types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} asc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîº", callback_data=f"none {page} {id_item} desc")]
            ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
    elif callback[3] == 'desc':
        if page == 1:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîΩ", callback_data=f"none {page} {id_item} asc")]
            ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
        else:
            auc_table_inline_button = [
                [types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"remove_page {page} {id_item} desc"),
                 types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}", callback_data="numer_page skip"),
                 types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"add_page {page} {id_item} desc")],
                [types.InlineKeyboardButton(text="–í—ã–∫—É–ø üîΩ", callback_data=f"none {page} {id_item} asc")]
            ]
            ikb = types.InlineKeyboardMarkup(inline_keyboard=auc_table_inline_button)
            return ikb
