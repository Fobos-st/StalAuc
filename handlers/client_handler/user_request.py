from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import text
from create_bot import bot
from database.dbitem import search_item_id_by_name, search_item_name_by_id, is_it_artifact
from database.dbsql import delete_request
from database.dbsql import update_sqlite_table
from text import current_request
from ..keyboard import cancel_inline_keyboard, get_keyboard_item
from ..keyboard import (main_kb, quality_inline_keyboard,
                        additional_inline_keyboard,
                        background_process_choice_keyboard_0,
                        background_process_choice_keyboard_1)


class MakeRequestUser(StatesGroup):
    item_name = State()
    item_id = State()
    price = State()
    quality = State()
    additional = State()


async def delete_current_user_request(callback_query: types.CallbackQuery):
    delete_request(callback_query.from_user.id)
    await callback_query.message.edit_text(text="–í—ã –µ—â—ë –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
                                           reply_markup=background_process_choice_keyboard_0)


async def cmd_item_check_check_item(callback_query: types.CallbackQuery):
    await MakeRequestUser.item_name.set()
    await bot.send_message(callback_query.from_user.id, text.input_item_name_messeage,
                           reply_markup=cancel_inline_keyboard)


# @dp.message_handler(content_types=["text"], state=MakeRequestUser.item_name)
async def get_item_name(message: types.Message, state: FSMContext):
    id_item = search_item_id_by_name(message.text, "RU")
    if len(id_item) > 1:
        kb = await get_keyboard_item(id_item)
        return await message.reply('–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–µ—Ä–µ—Ç–µ –Ω–∏–∂–µ', reply_markup=kb)
    elif len(id_item) == 1:
        callback_data = list(id_item.values())[0]
        await state.update_data(item_name=message.text)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞')
        await MakeRequestUser.next()
        await state.update_data(item_id=callback_data)
        await MakeRequestUser.next()
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç—É –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ó–∏–≤ –µ–≥–æ –∫—É–¥–∞-—Ç–æ —É–Ω—ë—Å –≤–æ –≤—Ä–µ–º—è –∑–∏–º–Ω–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ —Å –ø–∏–≤–æ–º!üçª',
                             reply_markup=main_kb)
        await state.finish()


# @dp.callback_query_handler(state=MakeRequestUser.item_name)
async def reg_request_in_db_one(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await bot.send_message(callback_query.from_user.id, "(", reply_markup=main_kb)
        await callback_query.message.delete()
    else:
        await callback_query.message.delete()
        callback_data = callback_query.data
        await state.update_data(item_name=search_item_name_by_id(callback_data))
        await bot.send_message(chat_id=callback_query.from_user.id, text='–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ')
        await MakeRequestUser.next()
        await state.update_data(item_id=callback_data)
        await MakeRequestUser.next()
        await bot.send_message(chat_id=callback_query.from_user.id,
                               text='–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö')


# @dp.message_handler(content_types=["text"], state=MakeRequestUser.price)
async def reg_request_in_db_two(message: types.Message, state: FSMContext):
    try:
        text_user_msg = int(message.text)
        await state.update_data(price=text_user_msg)
        data = await state.get_data()
        if is_it_artifact(data["item_id"]):
            await MakeRequestUser.next()
            await message.answer(
                '–í—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å \n–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞—Ä—Ç—Ñ–µ–∞–∫—Ç–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –¥–ª—è –≤–∞—Å –ø–æ —Ü–µ–Ω–µ –±—É–¥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å—Å—è –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∏ –±–æ–ª–µ–µ '
                '–≤—ã—Å–æ–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ —Ç–∞–∫ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ', reply_markup=quality_inline_keyboard)
        else:
            update_sqlite_table(message.from_user.id, data['item_id'], data['price'])
            await state.finish()
            await message.answer(text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ª–æ—Ç: \n {current_request(message.from_user.id)}",
                                 reply_markup=background_process_choice_keyboard_1)
    except ValueError:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏', reply_markup=main_kb)


# @dp.callback_query_handler(state=MakeRequestUser.quality)
async def reg_request_in_db_three(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(quality=callback_query.data)
    await MakeRequestUser.next()
    await callback_query.message.delete()
    await bot.send_message(chat_id=callback_query.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 0-15 –∫–∞—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞',
                           reply_markup=additional_inline_keyboard)


# @dp.callback_query_handler(state=MakeRequestUser.additional)
async def reg_request_in_db_four(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    await state.update_data(additional=callback_query.data)
    data = await state.get_data()
    additional = '–õ—é–±–∞—è' if data['additional'] == 'All' else f"–æ—Ç {data['additional']} –∏ –±–æ–ª–µ–µ"
    update_sqlite_table(user_id=callback_query.from_user.id,
                        item=data['item_id'],
                        price=data['price'],
                        quality=data['quality'],
                        additional=data['additional'])

    await bot.send_message(callback_query.from_user.id,
                           text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –ª–æ—Ç: \n {current_request(callback_query.from_user.id)}",
                           reply_markup=background_process_choice_keyboard_1)
    await state.finish()


def register_client_handlers_user_request(dp: Dispatcher):
    dp.register_callback_query_handler(cmd_item_check_check_item, text="reg_user_request")
    dp.register_callback_query_handler(delete_current_user_request, text="del_user_request")
    dp.register_message_handler(get_item_name, content_types=['text'], state=MakeRequestUser.item_name)
    dp.register_callback_query_handler(reg_request_in_db_one, state=MakeRequestUser.item_name)
    dp.register_message_handler(reg_request_in_db_two, content_types=["text"], state=MakeRequestUser.price)
    dp.register_callback_query_handler(reg_request_in_db_three, state=MakeRequestUser.quality)
    dp.register_callback_query_handler(reg_request_in_db_four, state=MakeRequestUser.additional)
